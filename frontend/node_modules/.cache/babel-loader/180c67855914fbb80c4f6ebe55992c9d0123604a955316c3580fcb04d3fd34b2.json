{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\Desktop\\\\udemy\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  if (data.isError) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 16\n    }, this);\n  }\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport async function loader() {\n  const response = await fetch('http://localhost:8080/eventsasda');\n  if (!response.ok) {\n    // return {isError: true, message: 'Could not fetch errors'}\n    // throw new Response(JSON.stringify({message: 'Could not fetch events.'}), {\n    //     status: 500\n    // });\n    throw json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","data","isError","children","message","fileName","_jsxFileName","lineNumber","columnNumber","events","_c","loader","response","fetch","ok","status","$RefreshReg$"],"sources":["C:/Users/Admin/OneDrive/Desktop/udemy/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, json } from 'react-router-dom';\r\n\r\nimport EventsList from '../components/EventsList';\r\n\r\nfunction EventsPage() {\r\n\r\n    const data = useLoaderData();\r\n    if (data.isError) {\r\n        return <p>{data.message}</p>\r\n    }\r\n    const events = data.events\r\n\r\n    return (\r\n        <EventsList events={events} />\r\n    );\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nexport async function loader() {\r\n    const response = await fetch('http://localhost:8080/eventsasda');\r\n\r\n    if (!response.ok) {\r\n        // return {isError: true, message: 'Could not fetch errors'}\r\n        // throw new Response(JSON.stringify({message: 'Could not fetch events.'}), {\r\n        //     status: 500\r\n        // });\r\n        throw json(\r\n            { message: 'Could not fetch events.' },\r\n            {\r\n              status: 500\r\n            })\r\n    } else {\r\n        return response;\r\n    }\r\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,QAAQ,kBAAkB;AAEtD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAElB,MAAMC,IAAI,GAAGP,aAAa,CAAC,CAAC;EAC5B,IAAIO,IAAI,CAACC,OAAO,EAAE;IACd,oBAAOJ,OAAA;MAAAK,QAAA,EAAIF,IAAI,CAACG;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAChC;EACA,MAAMC,MAAM,GAAGR,IAAI,CAACQ,MAAM;EAE1B,oBACIX,OAAA,CAACF,UAAU;IAACa,MAAM,EAAEA;EAAO;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAEtC;AAACR,EAAA,CAXQD,UAAU;EAAA,QAEFL,aAAa;AAAA;AAAAgB,EAAA,GAFrBX,UAAU;AAanB,eAAeA,UAAU;AAEzB,OAAO,eAAeY,MAAMA,CAAA,EAAG;EAC3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,CAAC;EAEhE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd;IACA;IACA;IACA;IACA,MAAMnB,IAAI,CACN;MAAES,OAAO,EAAE;IAA0B,CAAC,EACtC;MACEW,MAAM,EAAE;IACV,CAAC,CAAC;EACV,CAAC,MAAM;IACH,OAAOH,QAAQ;EACnB;AACJ;AAAC,IAAAF,EAAA;AAAAM,YAAA,CAAAN,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}